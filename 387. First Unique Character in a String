Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:
Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1

Constraints:
1 <= s.length <= 105
s consists of only lowercase English letters.

-----------------------------------------------------
Sol 1 - TC - O(n^2) SC - O(1)

class Solution {
    public int firstUniqChar(String s) {
        int len = s.length();

        if(s == null || len <= 1)
        {
            return 0;
        }

        boolean hasDup;
        for(int i = 0; i < len; i++)
        {
            hasDup = false;
            for(int j = 0 ; j < len; j++)
            {
                if(i != j && s.charAt(i) == s.charAt(j))
                {
                    hasDup = true;
                    break;
                }
            }
            if(hasDup == false)
                return i;
        }
        return -1;
    }
}

---------------------------------------------------------
Sol 2 - Hashmap 
TC - O(n)  SC - O(1) as we have 26 chars from A to Z

class Solution {
    public int firstUniqChar(String s) {
        int len = s.length();
        if(s == null || len == 1)
        {
            return 0;
        }
        HashMap<Character, Integer> map = new HashMap();

        for(char c: s.toCharArray())
        {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        for(int i = 0; i < len; i++)
        {
            if(map.get(s.charAt(i)) == 1)
            {
                return i;
            }
        }
        return -1;
    }
}

-----------------------------------------------------
Sol 3 - Frequency count
TC - O(n)  SC - O(1)

class Solution {
    public int firstUniqChar(String s) {
        int len = s.length();
        int[] freqcount = new int[26];

        for(int i = 0; i < len; i++)
        {
            freqcount[s.charAt(i) - 'a']++;
        }

        for(int i = 0; i < len; i++)
        {
            if(freqcount[s.charAt(i) - 'a'] == 1)
            {
                return i;
            }
        }
        return -1;
    }
}
