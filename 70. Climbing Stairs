You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
1 <= n <= 45

---------------------------------------------------------------
Top Down - TC - O(N)  SC - O(N)
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        return getCount(n, dp);
    }
    
    public int getCount(int n, int[] dp)
    {
        if(n == 1 || n == 2)
            return n;
        
        if(dp[n] != 0)
        {
            return dp[n];
        }
        else
        {
            int result = getCount(n - 1, dp) + getCount(n - 2, dp);
            dp[n] = result;
            return dp[n];
        }
    }
 
 Method 2 - Bottom up - TC - O(N)   SC - O(N)
     public int climbStairs(int n) {
        if(n == 0 || n == 1)
            return n;
        
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i = 3; i <= n; i++)
        {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
    
Method 3 - Iterative fibonacci approach - TC - O(N) SC - O(1)
    public int climbStairs(int n) {
        if(n == 0 || n == 1)
            return n;
        
        int a = 1;
        int b = 2;
        
        for(int i = 3; i <= n; i++)
        {
            int temp = a + b;
            a = b;
            b = temp;
        }
        return b;
    }

